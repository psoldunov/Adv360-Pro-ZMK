#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &tog 1                                                                    &mo 3      &kp N6  &kp N7          &kp N8        &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &kp LC(LGUI)                                                              &sl 4      &kp Y   &kp U           &kp I         &kp O     &kp P     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &kp LC(LG(LSHFT))  &kp DELETE     &kp HOME      &kp PG_UP      &kp RCTRL  &sl 5      &kp H   &kp J           &kp K         &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                                     &kp END       &kp PAGE_DOWN                        &kp N   &kp M           &kp COMMA     &kp DOT   &kp FSLH  &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp LCTRL          &kp BACKSPACE  &kp LALT      &kp LGUI       &kp ENTER  &kp SPACE          &kp DOWN_ARROW  &kp UP_ARROW  &kp LBKT  &kp RBKT  &mo 2
            >;
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 3      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        HYPR_MOD3 {
            bindings = <
&kp LC(LA(EQUAL))  &kp LC(LA(N1))     &kp LC(LA(N2))  &kp LC(LA(N3))  &kp LC(LA(N4))  &kp LC(LA(N5))  &none                                  &none  &kp LC(LA(N6))  &kp LC(LA(N7))  &kp LC(LA(N8))     &kp LC(LA(N9))    &kp LC(LA(N0))    &kp LC(LA(MINUS))
&none              &kp LC(LA(Q))      &kp LC(LA(W))   &kp LC(LA(E))   &kp LC(LA(R))   &kp LC(LA(T))   &none                                  &none  &kp LC(LA(Y))   &kp LC(LA(U))   &kp LC(LA(I))      &kp LC(LA(O))     &kp LC(LA(P))     &kp LC(LA(BSLH))
&none              &kp LC(LA(A))      &kp LC(LA(S))   &kp LC(LA(D))   &kp LC(LA(F))   &kp LC(LA(G))   &none  &none  &none      &none  &none  &none  &kp LC(LA(H))   &kp LC(LA(J))   &kp LC(LA(K))      &kp LC(LA(L))     &kp LC(LA(SEMI))  &kp LC(LA(SQT))
&none              &kp LC(LA(Z))      &kp LC(LA(X))   &kp LC(LA(C))   &kp LC(LA(V))   &kp LC(LA(B))                 &none      &none                &kp LC(LA(N))   &kp LC(LA(M))   &kp LC(LA(COMMA))  &kp LC(LA(DOT))   &kp LC(LA(FSLH))  &none
&none              &kp LC(LA(GRAVE))  &none           &none           &none                           &none  &none  &none      &none  &none  &none                  &none           &none              &kp LC(LA(LBKT))  &kp LC(LA(RBKT))  &none
            >;
        };

        HYPR_MOD4 {
            bindings = <
&kp LC(LA(LS(EQUAL)))  &kp LC(LA(LS(N1)))     &kp LC(LA(LS(N2)))  &kp LC(LA(LS(N3)))  &kp LC(LA(LS(N4)))  &kp LC(LA(LS(N5)))  &none                                  &none  &kp LC(LA(LS(N6)))     &kp LC(LA(LS(N7)))  &kp LC(LA(LS(N8)))     &kp LC(LA(LS(N9)))    &kp LC(LA(LS(N0)))    &kp LC(LA(LS(MINUS)))
&none                  &kp LC(LA(LS(Q)))      &kp LC(LA(LS(W)))   &kp LC(LA(LS(E)))   &kp LC(LA(LS(R)))   &kp LC(LA(LS(T)))   &none                                  &none  &kp LC(LA(LS(LS(Y))))  &kp LC(LA(LS(U)))   &kp LC(LA(LS(I)))      &kp LC(LA(LS(O)))     &kp LC(LA(LS(P)))     &kp LC(LA(LS(BSLH)))
&none                  &kp LC(LA(LS(A)))      &kp LC(LA(LS(S)))   &kp LC(LA(LS(D)))   &kp LC(LA(LS(F)))   &kp LC(LA(LS(G)))   &none  &none  &none      &none  &none  &none  &kp LC(LA(LS(H)))      &kp LC(LA(LS(J)))   &kp LC(LA(LS(K)))      &kp LC(LA(LS(L)))     &kp LC(LA(LS(SEMI)))  &kp LC(LA(LS(SQT)))
&none                  &kp LC(LA(LS(Z)))      &kp LC(LA(LS(X)))   &kp LC(LA(LS(C)))   &kp LC(LA(LS(V)))   &kp LC(LA(LS(B)))                 &none      &none                &kp LC(LA(LS(N)))      &kp LC(LA(LS(M)))   &kp LC(LA(LS(COMMA)))  &kp LC(LA(LS(DOT)))   &kp LC(LA(LS(FSLH)))  &none
&none                  &kp LC(LA(LS(GRAVE)))  &none               &none               &none                                   &none  &none  &none      &none  &none  &none                         &none               &none                  &kp LC(LA(LS(LBKT)))  &kp LC(LA(LS(RBKT)))  &none
            >;
        };
    };
};
